<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">	<!версия HTML-стандарта>
<HTML>	<!начало html-документа>
<HEAD>	<!заголовок html-документа>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
<TITLE>Модель микропроцессора</TITLE>	<!заголовок страницы>
<BASEFONT SIZE=3> <!базовый размер символов (для всего документа>
</HEAD>
<BODY BGCOLOR=#cfFFFF>	<!тело html-документа>
<HR SIZE=5 WIDTH=60%>

<H2>Программная модель микропроцессора</H2>
<P>На современном компьютерном рынке наблюдается большое разнообразие 
различных типов компьютеров. Поэтому возможно предположить возникновение
у потребителя вопроса — как оценить возможности конкретного типа (или модели)
компьютера и его отличительные особенности от компьютеров
других типов (моделей). Рассмотрения для этого одной лишь только структурной схемы компьютера 
недостаточно, так как она принципиально
мало чем различается у разных машин: у всех компьютеров есть
оперативная память, процессор, внешние устройства.
<BR>Различными
являются способы, средства и используемые ресурсы, с помощью
которых компьютер функционирует как единый механизм. Чтобы
собрать воедино все понятия, характеризующие компьютер с точки
зрения его функциональных программно-управляемых свойств,
существует специальный термин — <EM><B>архитектура ЭВМ</B></EM>.
<BR>Впервые понятие архитектура ЭВМ стало упоминаться с появлением машин 3-го поколения
для их сравнительной оценки.
<P>К изучению языка ассемблера любого компьютера имеет смысл приступать
только после выяснения того, какая часть компьютера оставлена
видимой и доступной для программирования на этом языке. Это
так называемая программная модель компьютера,
частью которой является <EM><B>программная модель микропроцессора</B></EM>, которая
содержит 32 регистра в
той или иной мере доступных для использования программистом.
<BR>Данные регистры можно разделить на две большие группы:
<UL>
<LI><A HREF="#Пользовательские регистры">16 пользовательских регистров;</A>
<LI><A HREF="#Системные регистры">16 системных регистров.</A>
</UL>
 В программах на языке ассемблера регистры используются
очень интенсивно. Большинство регистров имеют определенное
функциональное назначение.<BR><BR><BR><BR><BR><BR><BR><BR>
 
<A NAME="Пользовательские регистры"> 
<H3> Пользовательские регистры</H3>
 Как следует из названия, <EM>пользовательскими</EM> регистры
называются потому, что программист может использовать их при
написании своих программ. К этим регистрам относятся (<A HREF="#Рис_1">рис. 1</A>):
<UL>
<LI>восемь 32-битных регистров, которые могут использоваться
 программистами для хранения данных и адресов (их еще называют
 <A HREF="#регистры общего назначения">регистрами общего назначения</A> (РОН)):
 <UL>
 <LI TYPE=CIRCLE><B>eax/ax/ah/al</B>;
 <LI TYPE=CIRCLE><B>ebx/bx/bh/bl</B>;
 <LI TYPE=CIRCLE><B>edx/dx/dh/dl</B>;
 <LI TYPE=CIRCLE><B>ecx/cx/ch/cl</B>;
 <LI TYPE=CIRCLE><B>ebp/bp</B>;
 <LI TYPE=CIRCLE><B>esi/si</B>;
 <LI TYPE=CIRCLE><B>edi/di</B>;
 <LI TYPE=CIRCLE><B>esp/sp</B>.
 </UL>
<LI><A HREF="#Сегментные регистры">шесть регистров сегментов:</A> <B>cs, ds, ss, es, fs, gs</B>;
<LI><A HREF="#Регистры состояния и управления">регистры состояния и управления</A>:
<UL>
 <LI TYPE=CIRCLE>регистр флагов <B>eflags/flags</B>;
 <LI TYPE=CIRCLE>регистр указателя команды <B>eip/ip</B>.
</UL>
</UL>
 <A NAME="Рис_1">
 <P ALIGN=CENTER>
 <IMG SRC="../Pic/Ris2_1.gif" BORDER=0">
<P ALIGN=CENTER><EM><B>Рис. 1.</B> Пользовательские регистры микропроцессоров i486 и Pentium</EM>
 
<P>Почему многие из этих регистров приведены с наклонной
разделительной чертой?
<BR> Нет, это не разные регистры — это
части одного большого 32-разрядного регистра. Их можно
использовать в программе как отдельные объекты.
<BR>Так сделано для обеспечения работоспособности программ,
написанных для младших 16-разрядных моделей микропроцессоров
фирмы Intel, начиная с i8086.
<BR> Микропроцессоры i486 и Pentium
имеют в основном 32-разрядные регистры. Их количество, за
исключением сегментных регистров, такое же, как и у i8086, но
размерность больше, что и отражено в их обозначениях — они
имеют 
<BR>приставку <B>e</B> (<CITE><B>E</B>xtended</CITE>).
<P>Разберемся подробнее с составом и назначением
пользовательских регистров.
 
<A NAME="регистры общего назначения"> 
<H4> Регистры общего назначения</H4>
 Все регистры этой группы позволяют обращаться к своим
<BR>“младшим” частям (см. <A HREF="#Рис_1">рис. 1</A>).
<BR>Рассматривая этот рисунок,
заметьте, что использовать для самостоятельной адресации можно
только младшие 16 и 8-битные части этих регистров. Старшие 16
бит этих регистров как самостоятельные объекты недоступны. Это
сделано, как мы отметили выше, для совместимости с младшими 16-разрядными моделями микропроцессоров фирмы Intel.
<P>Перечислим
регистры, относящиеся к группе регистров общего назначения.
Так как эти регистры физически находятся в микропроцессоре
внутри арифметико-логического устройства (АЛУ), то их еще
называют <EM>регистрами АЛУ</EM>:
<UL>
<LI><B>eax/ax/ah/al</B> (Accumulator register) — <EM>аккумулятор</EM>.
<BR>Применяется для хранения промежуточных данных. В некоторых
 командах использование этого регистра обязательно;
<LI><B>ebx/bx/bh/bl</B> (Base register) — <EM>базовый</EM> регистр.
 <BR>Применяется для хранения базового адреса некоторого объекта в
 памяти;
<LI><B>ecx/cx/ch/cl</B> (Count register) — <EM>регистр-счетчик</EM>.
<BR> Применяется в командах, производящих некоторые повторяющиеся
 действия. Его использование зачастую неявно и скрыто в
 алгоритме работы соответствующей команды.
 <BR> К примеру, команда
 организации цикла 
 <A HREF="Command.htm#loop" TARGET="M3"><B>loop</B></A> кроме передачи управления команде,
 находящейся по некоторому адресу, анализирует и уменьшает на
 единицу значение регистра <EM><EM>ecx/cx</EM></EM>;
<LI><B>edx/dx/dh/dl</B> (Data register) — регистр <EM>данных</EM>.
<BR>Так же, как
 и регистр <EM><EM>eax/ax/ah/al</EM></EM>, он хранит промежуточные данные. В
 некоторых командах его использование обязательно; для
 некоторых команд это происходит неявно.
</UL> 
 Следующие два регистра используются для поддержки так
называемых цепочечных операций, то есть операций, производящих
последовательную обработку цепочек элементов, каждый из
которых может иметь длину 32, 16 или 8 бит:
<UL>
<LI><B>esi/si</B> (Source Index register) — <EM>индекс источника</EM>.
<BR>Этот регистр в цепочечных операциях содержит текущий адрес элемента
 в цепочке-источнике;
<LI><B>edi/di</B> (Destination Index register) —  <EM>индекс приемника</EM>
(получателя).
<BR>Этот регистр в цепочечных операциях содержит
текущий адрес в цепочке-приемнике.
</UL>
 В архитектуре микропроцессора на программно-аппаратном
уровне поддерживается такая структура данных, как <EM><B>стек</B></EM>. Для
работы со стеком в системе команд микропроцессора есть
специальные команды, а в программной модели микропроцессора
для этого существуют специальные регистры:
<UL>
<LI><B>esp/sp</B> (Stack Pointer register) — регистр <EM>указателя
 стека</EM>.
 <BR>Содержит указатель вершины стека в текущем сегменте
 стека.
<LI><B>ebp/bp</B> (Base Pointer register) — регистр <EM>указателя базы
кадра стека</EM>.
 <BR>Предназначен для организации произвольного
доступа к данным внутри стека.
</UL>
 Не спешите пугаться столь жесткого функционального
назначения регистров АЛУ. На самом деле, большинство из них
могут использоваться при программировании для хранения
операндов практически в любых сочетаниях. Но, как мы отметили выше, некоторые команды
используют фиксированные регистры для выполнения своих
действий. Это нужно обязательно учитывать.
<BR>Использование жесткого закрепления регистров для
некоторых команд позволяет более компактно кодировать их
машинное представление. Знание этих особенностей позволит вам
при необходимости хотя бы на несколько байт сэкономить
память, занимаемую кодом программы.
 
<A NAME="Сегментные регистры"> 
<H4> Сегментные регистры</H4>
 В программной модели микропроцессора имеется шесть
сегментных регистров: <EM>cs, ss, ds, es, gs, fs</EM>.
<BR>Их существование
обусловлено спецификой организации и использования оперативной
памяти микропроцессорами Intel. Она заключается в том, что
микропроцессор аппаратно поддерживает структурную организацию
программы в виде трех частей, называемых <EM>сегментами</EM>.
Соответственно, такая организация памяти называется <EM><B>сегментной</B></EM>.
<P>Для того чтобы указать на сегменты, к которым программа имеет
доступ в конкретный момент времени, и предназначены <EM>сегментные
регистры</EM>. Фактически, с небольшой поправкой, как мы увидим
далее, в этих регистрах содержатся адреса памяти с которых
начинаются соответствующие сегменты. Логика обработки машинной
команды построена так, что при выборке команды, доступе к
данным программы или к стеку неявно используются адреса во
вполне определенных сегментных регистрах. Микропроцессор
поддерживает следующие типы сегментов:
<OL>
<LI><EM><B>Сегмент кода</B></EM>. Содержит команды программы.
	<BR>Для доступа к
 этому сегменту служит регистр <B>cs</B> (code segment register) —
 <EM>сегментный регистр кода</EM>. Он содержит адрес сегмента с
 машинными командами, к которому имеет доступ микропроцессор
 (то есть эти команды загружаются в конвейер микропроцессора).
<LI><EM><B>Сегмент данных</B></EM>. Содержит обрабатываемые программой
 данные.
 <BR>Для доступа к этому сегменту служит регистр <B>ds</B> (data
 segment register) — <EM>сегментный регистр данных</EM>, который хранит
 адрес сегмента данных текущей программы.
<LI><EM><B>Сегмент стека</B></EM>. Этот сегмент представляет собой область
 памяти, называемую <EM>стеком</EM>.
 <BR>Работу со стеком микропроцессор
 организует по следующему принципу: <CITE>последний записанный в эту
 область элемент выбирается первым</CITE>. Для доступа к этому
 сегменту служит регистр <B>ss</B> (stack segment register) —
 <EM>сегментный регистр стека</EM>, содержащий адрес сегмента стека.
<LI><EM><B>Дополнительный сегмент данных</B></EM>. 
<BR>Неявно алгоритмы
 выполнения большинства машинных команд предполагают, что
 обрабатываемые ими данные расположены в сегменте данных, адрес
 которого находится в сегментном регистре <EM>ds</EM>.
 <BR>Если программе
 недостаточно одного сегмента данных, то она имеет возможность
 использовать еще три дополнительных сегмента данных. Но в
 отличие от основного сегмента данных, адрес которого
 содержится в сегментном регистре <EM>ds</EM>, при использовании
 дополнительных сегментов данных их адреса требуется указывать
 явно с помощью специальных <EM>префиксов переопределения сегментов</EM>
 в команде.
 <BR>Адреса дополнительных сегментов данных должны
 содержаться в регистрах <B>es, gs, fs</B> (extension data segment
 registers).
</OL>
 
<A NAME="Регистры состояния и управления">
<H4> Регистры состояния и управления</H4>
 В микропроцессор включены несколько регистров (см. <A HREF="#Рис_1">рис. 1</A>),
 которые постоянно содержат информацию о состоянии как
самого микропроцессора, так и программы, команды которой в
данный момент загружены на конвейер.
 К этим регистрам относятся:
 <UL>
<LI>регистр флагов <B>eflags/flags</B>;
<LI>регистр указателя команды <A HREF="#EipIp"> <B>eip/ip</B></A>.
</UL>
 Используя эти регистры, можно получать информацию о
результатах выполнения команд и влиять на состояние самого
микропроцессора. Рассмотрим подробнее назначение и содержимое
этих регистров:
<P><EM><B> eflags/flags</B></EM> (flag register) — регистр <EM>флагов</EM>. Разрядность
<EM> eflags/flags</EM> — 32/16 бит. Отдельные биты данного регистра
имеют определенное функциональное назначение и называются
флагами. Младшая часть этого регистра полностью аналогична
регистру <EM>flags</EM> для i8086. На <A HREF="#Рис_2">рис. 2</A> показано содержимое
регистра <EM>eflags</EM>.
 
 <A NAME="Рис_2">
 <P ALIGN=CENTER>
 <IMG SRC="../Pic/Ris2_2.gif" BORDER=0">
<P ALIGN=CENTER><EM><B> Рис. 2.</B> Содержимое регистра eflags</EM>
<P> Исходя из особенностей использования, флаги регистра
<EM>eflags/flags</EM> можно разделить на три группы:
<UL>

<LI><EM>8 флагов состояния</EM>. Эти флаги могут изменяться после
 выполнения машинных команд.
 <BR><EM>Флаги состояния </EM> регистра <EM>eflags</EM>
 отражают особенности результата исполнения арифметических или
 логических операций. Это дает возможность анализировать
 состояние вычислительного процесса и реагировать на него с
 помощью команд условных переходов и вызовов подпрограмм. В
<A HREF="#Табл. 1"> табл. 1</A> приведены флаги состояния и указано их назначение;

<LI><EM>1 флаг управления</EM>. Обозначается <B>df</B> (Directory Flag).
 <BR>Он находится в 10-м бите регистра <EM>eflags</EM> и используется
 цепочечными командами. Значение флага <EM>df</EM> определяет
 направление поэлементной обработки в этих операциях: от начала
 строки к концу (<EM>df</EM> = 0) либо наоборот, от конца строки к ее
 началу (<EM>df</EM> = 1).
 <BR>Для работы с флагом <EM>df</EM> существуют специальные
 команды: cld (снять флаг <EM>df</EM>) и std (установить флаг <EM>df</EM>).
 <BR>Применение этих команд позволяет привести флаг <EM>df</EM> в
 соответствие с алгоритмом и обеспечить автоматическое
 увеличение или уменьшение счетчиков при выполнении операций со
 строками;

<LI><EM>5 системных флагов</EM>, управляющих вводом/выводом,
 маскируемыми прерываниями, отладкой, переключением между
 задачами и виртуальным режимом 8086.
 <BR>Прикладным программам не
 рекомендуется модифицировать без необходимости эти флаги, так
 как в большинстве случаев это приведет к прерыванию работы
 программы. В <A HREF="#Табл. 2"> табл. 2</A> перечислены системные флаги, их
 назначение.
</UL> 
 <A NAME="Табл. 1">

 <H5>Таблица 1. Флаги состояния</H5>
<CENTER>
	<TABLE ALIGN=CENTER BGCOLOR="#E2E2E2" BORDER=3 RULES=ALL VALIGN=MIDDLE>
<TR ALIGN=CENTER><TD>Мнемоника флага</TD><TD>Флаг</TD><TD>Номер бита в <EM>eflags</EM></TD><TD>Содержание и назначение</TD></TR>
<TR ALIGN=CENTER><TD>cf</TD><TD>Флаг переноса<BR>(Carry Flag)</TD><TD>0</TD><TD ALIGN=LEFT>
1 — арифметическая операция произвела перенос из старшего бита результата. Старшим
 является 7, 15 или 31-й бит в зависимости от размерности  операнда;
 <BR>0 — переноса не было</TD></TR>
<TR ALIGN=CENTER><TD>pf</TD><TD>Флаг паритета<BR>(Parity Flag)</TD><TD>2</TD><TD ALIGN=LEFT>
1 — 8 младших разрядов (этот флаг — только для 8 младших разрядов операнда любого
  размера) результата содержат  четное число единиц;
 <BR>0 — 8 младших разрядов  результата содержат нечетное число единиц</TD></TR>
<TR ALIGN=CENTER><TD>af</TD><TD>Вспомогательный флаг переноса<BR>(Auxiliary carry Flag)</TD><TD>4</TD><TD ALIGN=LEFT>
Только для команд работающих с BCD-числами. Фиксирует факт заема из младшей тетрады результата:
<BR>1 — в результате операции сложения был произведен перенос из разряда 3 в старший разряд
 или при вычитании был заем в разряд 3 младшей тетрады из значения в старшей тетраде;
<BR>0 — переносов и заемов в(из) 3 разряд(а) младшей тетрады результата не было</TD></TR>
<TR ALIGN=CENTER><TD>zf</TD><TD>Флаг нуля (Zero Flag)</TD><TD>6</TD><TD ALIGN=LEFT>
1 — результат нулевой;
<BR> 0 — результат ненулевой</TD></TR>
<TR ALIGN=CENTER><TD>sf</TD><TD>Флаг знака<BR>(Sign Flag)</TD><TD>7</TD><TD ALIGN=LEFT>
Отражает состояние старшего бита результата (биты 7, 15 или 31 для 8, 16 или 32-разрядных
 операндов соответственно):
 <BR>1 — старший бит результата равен 1;
<BR> 0 — старший бит результата равен 0</TD></TR>
<TR ALIGN=CENTER><TD>of</TD><TD>Флаг переполнения<BR>(Overflow Flag)</TD><TD>11</TD><TD ALIGN=LEFT>
Флаг of используется для фиксирования факта потери значащего бита при арифметических операциях:
<BR>1 — в результате операции происходит перенос (заем) в(из) старшего, знакового бита результата
 (биты 7, 15 или 31 для 8, 16 или 32-разрядных операндов соответственно);
<BR>0 — в результате операции не происходит переноса (заема) в(из) старшего, знакового бита  результата</TD></TR>
<TR ALIGN=CENTER><TD>iopl</TD><TD>Уровень Привилегий ввода-вывода<BR>(Input/Output Privilege Level)</TD><TD>
12, 13</TD><TD ALIGN=LEFT> Используется в защищенном режиме работы микропроцессора для контроля доступа к командам
ввода-вывода в зависимости от привилегированности задачи</TD></TR>
<TR ALIGN=CENTER><TD>nt</TD><TD>флажок вложенности задачи<BR>(Nested Task)</TD><TD>14</TD><TD ALIGN=LEFT>
Используется в защищенном режиме работы микропроцессора для фиксации того факта, что одна
 задача вложена в другую</TD></TR>
 </TABLE>	
	</CENTER>

 
 <A NAME="Табл. 2">
 <H5>Таблица 2. Системные флаги</H5>
<CENTER>
	<TABLE ALIGN=CENTER BGCOLOR="#E2E2E2" BORDER=3 RULES=ALL VALIGN=MIDDLE>
<TR ALIGN=CENTER><TD>Мнемоника флага</TD><TD>Флаг</TD><TD>Номер бита в <EM>eflags</EM></TD><TD>Содержание и назначение</TD></TR>
<TR ALIGN=CENTER><TD>tf</TD><TD>Флаг трассировки<BR>(Trace Flag)</TD><TD>8</TD><TD ALIGN=LEFT>
Предназначен для организации пошаговой работы микропроцессора.
<BR>1 — микропроцессор генерирует прерывание с номером 1 после выполнения каждой машинной
 команды. Может использоваться при отладке программ, в частности отладчиками;
<BR>0 — обычная работа</TD></TR>
<TR ALIGN=CENTER><TD>if</TD><TD>Флаг прерывания<BR>(Interrupt enable Flag)</TD><TD>9</TD><TD ALIGN=LEFT>
Предназначен для разрешения или запрещения (маскирования) аппаратных прерываний (прерываний
 по входу INTR).
<BR>1 — аппаратные прерывания разрешены;
<BR> 0 — аппаратные прерывания запрещены</TD></TR>
<TR ALIGN=CENTER><TD>rf</TD><TD>Флаг  возобновления<BR>(Resume Flag)</TD><TD>16</TD><TD ALIGN=LEFT>
Используется при обработке прерываний от регистров отладки.</TD></TR>
<TR ALIGN=CENTER><TD>vm</TD><TD>Флаг виртуального<BR>(Virtual 8086 Mode)</TD><TD>17</TD><TD ALIGN=LEFT>
Признак работы микропроцессора в режиме виртуального 8086.
<BR>1 — процессор работает в режиме виртуального 8086;
<BR>0 — процессор работает в реальном или защищенном режиме</TD></TR>
<TR ALIGN=CENTER><TD>ac</TD><TD>Флаг контроля выравнивания<BR>(Alignment Check)</TD><TD>18</TD><TD ALIGN=LEFT>
Предназначен для разрешения контроля выравнивания при обращениях к памяти. Используется
совместно с битом am в системном регистре cr0. К примеру, Pentium разрешает размещать команды и
 данные с любого адреса. Если требуется контролировать выравнивание данных и команд по
 адресам кратным 2 или 4, то установка данных битов приведет к тому, что все обращения по
 некратным адресам будут возбуждать исключительную ситуацию</TD></TR>
 </TABLE>	
	</CENTER>
 
 
<A NAME="EipIp">
<P><EM><B>eip/ip</B></EM> (Instraction Pointer register) — регистр<EM>-указатель команд</EM>.
<BR>Регистр <EM>eip/ip</EM> имеет разрядность 32/16 бит и содержит смещение
следующей подлежащей выполнению команды относительно
содержимого сегментного регистра cs в текущем сегменте команд.
Этот регистр непосредственно недоступен программисту, но
загрузка и изменение его значения производятся различными
командами управления, к которым относятся команды условных и
безусловных переходов, вызова процедур и возврата из процедур.
Возникновение прерываний также приводит к модификации регистра
<EM>eip/ip</EM>.


<A NAME="Системные регистры"> 
<H3>Системные регистры микропроцессора</H3>
<P>Само название этих регистров говорит о том, что они
выполняют специфические функции в системе. Использование системных
регистров жестко регламентировано. Именно они обеспечивают
работу защищенного режима. Их также можно рассматривать как
часть архитектуры микропроцессора, которая намеренно оставлена
видимой для того, чтобы квалифицированный системный
программист мог выполнить самые низкоуровневые операции.
<P>Системные регистры можно разделить на три группы:
<UL>
<LI>четыре <A HREF="#регистры управления">регистра управления</A>;
<LI>четыре <A HREF="#регистры системных адресов">регистра системных адресов</A>;
<LI>восемь <A HREF="#Регистры отладки">регистров отладки</A>.
</UL>   
<BR><BR><BR><BR><BR><BR><BR>



<A NAME="регистры управления"> 
<H4>Регистры управления</H4>
   В группу регистров управления входят 4 регистра:
<BR><B>cr0, cr1, cr2, cr3</B>.
<P>Эти регистры предназначены для общего управления
системой.
<BR>Регистры управления доступны только программам с
уровнем привилегий 0.
<P>Хотя микропроцессор имеет четыре
регистра управления, доступными являются только три из них —
исключается <EM>cr1</EM>, функции которого пока не определены (он
зарезервирован для будущего использования).
<P>Регистр <B>cr0</B> содержит <EM>системные флаги</EM>, управляющие режимами
работы микропроцессора и отражающие его состояние глобально,
независимо от конкретных выполняющихся задач.
<BR>Назначение системных флагов:
<UL>
<LI><EM><B>pe</B></EM> (Protect Enable), бит 0 — <EM>разрешение защищенного
  режима работы</EM>.
  <BR>Состояние этого флага показывает, в каком из
  двух режимов — <EM>реальном</EM> (pe=0) или <EM>защищенном</EM> (pe=1) —
  работает микропроцессор в данный момент времени. 
<LI><EM><B>mp</B></EM> (Math Present), бит 1 — <EM>наличие сопроцессора</EM>. Всегда 1.
<LI><EM><B>ts</B></EM> (Task Switched), бит 3 — <EM>переключение задач</EM>.
<BR>Процессор автоматически устанавливает этот бит при
переключении на выполнение другой задачи.
<LI><EM><B>am</B></EM> (Aligment Mask), бит 18 — <EM>маска выравнивания</EM>.
<BR>Этот бит разрешает (am = 1) или запрещает (am = 0) контроль выравнивания.
<LI><EM><B>cd</B></EM> (Cache Disable), бит 30, — <EM>запрещение кэш-памяти</EM>.
<BR>С помощью этого бита можно запретить (cd = 1) или разрешить
(cd = 0) использование внутренней кэш-памяти (кэш-памяти первого уровня).
<LI><EM><B>pg</B></EM> (PaGing), бит 31, — <EM>разрешение (pg = 1) или запрещение
(pg = 0) страничного преобразования</EM>.
<BR>Флаг используется при страничной модели организации памяти.
</UL>

<P>Регистр <B>cr2</B> используется при страничной организации
оперативной памяти для регистрации ситуации, когда текущая
команда обратилась по адресу, содержащемуся в странице памяти,
отсутствующей в данный момент времени в памяти.
<BR>В такой ситуации в микропроцессоре возникает исключительная ситуация с
номером 14, и линейный 32-битный адрес команды, вызвавшей это
исключение, записывается в регистр <EM>cr2</EM>. Имея эту информацию,
обработчик исключения 14 определяет нужную страницу,
осуществляет ее подкачку в память и возобновляет нормальную
работу программы;
<P>Регистр <B>cr3</B> также используется при страничной организации
памяти.
<BR>Это так называемый <EM>регистр каталога страниц первого
уровня</EM>. Он содержит 20-битный физический базовый адрес
каталога страниц текущей задачи. Этот каталог содержит 1024 32-битных дескриптора, каждый из которых содержит адрес таблицы
страниц второго уровня. В свою очередь каждая из таблиц
страниц второго уровня содержит 1024 32-битных дескриптора,
адресующих страничные кадры в памяти. Размер страничного
кадра — 4 Кбайт.
   
   <A NAME="регистры системных адресов"> 
<H4>Регистры системных адресов</H4>
   Эти регистры еще называют <EM>регистрами управления памятью</EM>.
<BR>Они предназначены для защиты программ и данных в
мультизадачном режиме работы микропроцессора.
<P>При работе в защищенном режиме микропроцессора адресное пространство
делится на:
<UL>
<LI><EM>глобальное</EM> — общее для всех задач;
<LI><EM>локальное</EM> — отдельное для каждой задачи.
</UL>
   Этим разделением и объясняется присутствие в архитектуре
микропроцессора следующих системных регистров:
<UL>
<LI><EM>регистра таблицы глобальных дескрипторов</EM> <B>gdtr</B> (Global
  Descriptor Table Register) имеющего размер 48 бит и содержащего 32-битовый (биты 16—47) базовый адрес глобальной дескрипторной
  таблицы GDT и 16-битовое (биты 0—15) значение предела,
  представляющее собой размер в байтах таблицы GDT;
<LI><EM>регистра таблицы локальных дескрипторов</EM> <B>ldtr</B> (Local
Descriptor Table Register) имеющего размер 16 бит и содержащего так
называемый селектор дескриптора локальной дескрипторной
таблицы LDT. Этот селектор является указателем в таблице GDT,
который и описывает сегмент, содержащий локальную
дескрипторную таблицу LDT;
<LI><EM>регистра таблицы дескрипторов прерываний</EM> <B>idtr</B> (Interrupt
Descriptor Table Register) имеющего размер 48 бит и содержащего 32-битовый (биты 16–47) базовый адрес дескрипторной таблицы
прерываний IDT и 16-битовое (биты 0—15) значение предела,
представляющее собой размер в байтах таблицы IDT;
<LI><EM>16-битового регистра задачи</EM> <B>tr</B> (Task Register), который подобно
регистру ldtr, содержит селектор, то есть указатель на
дескриптор в таблице GDT. Этот дескриптор описывает <EM>текущий
сегмент состояния задачи</EM> (TSS — Task Segment Status). Этот
сегмент создается для каждой задачи в системе, имеет жестко
регламентированную структуру и содержит контекст (текущее
состояние) задачи. Основное назначение сегментов TSS —
сохранять текущее состояние задачи в момент переключения на
другую задачу.
</UL>
   
<A NAME="Регистры отладки"> 
<H4>Регистры отладки</H4>
   Это очень интересная группа регистров, предназначенных для
аппаратной отладки. Средства аппаратной отладки впервые
появились в микропроцессоре i486. Аппаратно микропроцессор
содержит восемь регистров отладки, но реально из них
используются только 6.
<P>Регистры <B>dr0, dr1, dr2, dr3</B> имеют разрядность 32 бит и
предназначены для задания линейных адресов четырех точек
прерывания. Используемый при этом механизм следующий: любой
формируемый текущей программой адрес сравнивается с адресами в
регистрах <EM>dr0...dr3</EM>, и при совпадении генерируется исключение
отладки с номером 1.
<P>Регистр <B>dr6</B> называется регистром состояния отладки. Биты
этого регистра устанавливаются в соответствии с причинами,
которые вызвали возникновение последнего исключения с номером 1. 
<P>Перечислим эти биты и их назначение:
<UL>
<LI><EM><B>b0</B></EM> — если этот бит установлен в 1, то последнее
  исключение (прерывание) возникло в результате достижения
  контрольной точки, определенной в регистре <EM>dr0</EM>;
<LI><EM><B>b1</B></EM> — аналогично <EM>b0</EM>, но для контрольной точки в регистре <EM>dr1</EM>;
<LI><EM><B>b2</B></EM> — аналогично <EM>b0</EM>, но для контрольной точки в регистре <EM>dr2</EM>;
<LI><EM><B>b3</B></EM> — аналогично <EM>b0</EM>, но для контрольной точки в регистре <EM>dr3</EM>;
<LI><EM><B>bd</B></EM> (бит 13) — служит для защиты регистров отладки;
<LI><EM><B>bs</B></EM> (бит 14) — устанавливается в 1, если исключение 1 было
вызвано состоянием флага <EM>tf</EM> = 1 в регистре <EM>eflags</EM>;
<LI><EM><B>bt</B></EM> (бит 15) устанавливается в 1, если исключение 1 было
вызвано переключением на задачу с установленным битом ловушки
в TSS <EM>t</EM> = 1.
</UL>
   Все остальные биты в этом регистре заполняются нулями.
Обработчик исключения 1 по содержимому <EM>dr6</EM> должен определить
причину, по которой произошло исключение, и выполнить
необходимые действия.
<P>Регистр <EM>dr7</EM> называется регистром управления отладкой. В нем
для каждого из четырех регистров контрольных точек отладки
имеются поля, с помощью которых можно уточнить следующие
условия, при которых следует сгенерировать прерывание:
<UL>
<LI><EM>место регистрации контрольной точки</EM> — только в текущей
  задаче или в любой задаче. Эти биты занимают младшие восемь
  бит регистра <EM>dr7</EM> (по два бита на каждую контрольную точку
  (фактически точку прерывания), задаваемую регистрами <EM>dr0, dr1,
  dr2, dr3</EM> соответственно). 
  <BR><EM>Первый</EM> бит из каждой пары — это так
  называемое <EM>локальное</EM> разрешение; его установка говорит о том,
  что точка прерывания действует если она находится в пределах
  адресного пространства текущей задачи. 
  <BR><EM>Второй</EM> бит в каждой
  паре определяет <EM>глобальное</EM> разрешение, которое говорит о том,
  что данная контрольная точка действует в пределах адресных
  пространств всех задач, находящихся в системе;
<LI><EM>тип доступа</EM>, по которому инициируется прерывание: только
при выборке команды, при записи или при записи/чтении данных.
Биты, определяющие подобную природу возникновения прерывания,
локализуются в старшей части данного регистра.
</UL>
<P>Большинство из системных регистров программно доступны. Не
все из них понадобятся в нашем дальнейшем изложении, но, тем не
менее, я коротко рассмотрел их с тем, чтобы возбудить у
читателя интерес к дальнейшему исследованию архитектуры
микропроцессора.

<HR SIZE=5 WIDTH=80%>
</BODY>
</HTML>	<!конец html-документа>